import React from "react";
import { SiNextdotjs, SiReact, SiRust, SiWebassembly } from "react-icons/si";
import { BiLogoTailwindCss, BiLogoNodejs, } from "react-icons/bi";
import { FaVuejs } from "react-icons/fa";
import { DEMO_SPI, maskCard } from "./misc/const";
import UserInfo from "./components/userinfo";

export default function Page() {

  const masked = JSON.parse(DEMO_SPI)
  masked.phone = masked.phone.split('-')
  masked.phone[0] = masked.phone[0].replace(/[0-9]/g, '*')
  masked.phone = masked.phone.join('-')
  masked.card = maskCard(masked.card, false)

  return (
    <>
      <article className="prose max-w-none">
        <h2>Sensitive Information Mask</h2>
        <p>
          Say your API has some Sensitive Personal Information like this:
        </p>
        <article className="prose prose-code">
          <pre typeof="json">
            {DEMO_SPI}
          </pre>
        </article>
        <p>
          And you don't want to expose the SPI to the client, so you mask it like this:
        </p>
        <article className="prose prose-code">
          <pre typeof="json">
            {JSON.stringify(masked, null, 2)}
          </pre>
        </article>
        <p>
          But there's still needs of exposing the SPI to certain user. For example, a salesman who have to follow the business lead.<br/>
          However, you don't want to expose the SPI to whoever calling the API so that they can retrieve the SPI in batch. <br/>
          What more can you do? <br/>
          With integration of <b>SIMask</b> you can mask the SPI on the server side, and:
        </p>
        <ul>
          <li>unmask it via a confirmation api call replay.</li>
          <li>expose only piece of SPI user really need</li>
          <li>ensure the replay request only happens in browser under assigned host name</li>
        </ul>
        <h2>Here is a demo</h2>
      </article>
      <div className="divider"></div>
      <UserInfo />
      <article className="prose max-w-none">
        <p>
          Notice how the real value being masked, and the masked value being unmasked.
          
        </p>
        <ul>
          <li>the request replayed provice only the true value for the masked field. not the whole json object.</li>
          <li>the request replayed only happens in browser under assigned host name (restricted via wasm).</li>
          <li>asymmetric encrypted signature header added in replay request (enabled via wasm).</li>
          <li>the eye component is generated by <b>SIMask</b>.</li>
          <li>developers needs only import <b>SIMask</b> and instantiate it globally once.</li>
          <li>provide a state to <b>SIMask</b> so that it can update the state when the request replayed.</li>
        </ul>
        <p>here are some snippet from the demo:</p>
        <div className="mockup-code mb-10">
          <pre><code>{
            `
            'use client'
            import React, { useState, useEffect } from "react";
            import axios from "axios";
            import Kynareth from "fe-enigma-kynareth";

            export default function Page() {

              const [name, setName] = useState('hello')
              const [phone, setPhone] = useState('')
              const [card, setCard] = useState('')
              const [eState, setEState] = useState(null)

              if (typeof window !== 'undefined') {
                global.__use_react__ = true
                const kynareth = new Kynareth()
                kynareth.setAdapter(axios)
                kynareth.setStateSetter(setEState)
              }

              useEffect(() => {
                axios.get('/api')
                  .then(res => res.data)
                  .then(data => {
                    setName(data.name)
                    setPhone(data.phone)
                    setCard(data.card)
                  })
              }, [])

              useEffect(() => {
                console.log(phone, eState)
              }, [eState])

              return (
                <div className="card card-side bg-base-100 shadow-xl mb-10">
                  <figure><img src="/avatar.png" alt="Movie" /></figure>
                  <div className="card-body">
                    <h2 className="card-title">Key Account</h2>
                    <p>Very important account</p>
                    <p>Now at stage 2</p>
                    <div className="flex">
                      <div className="w-20">name:</div>
                      <div>{name.toString()}</div>
                    </div>
                    <div className="flex">
                      <div className="w-20">phone:</div>
                      <div>{phone.toString()}</div>
                    </div>
                    <div className="flex">
                      <div className="w-20">card no.:</div>
                      <div>{card.toString()}</div>
                    </div>
                  </div>
                </div>
              )
            }
            `}
          </code></pre>
        </div>
      </article>
      <div className="divider"></div>
      <div className="flex flex-row justify-center mb-10">
        <span className="mr-4 stack"><BiLogoTailwindCss size={24} style={{display: "inline-block"}}/> Tailwindcss </span>
        <span className="mr-4 stack"><SiNextdotjs size={24} style={{display: "inline-block"}}/> NextJS </span>
        <span className="mr-4 stack"><SiReact size={24} style={{display: "inline-block"}}/> ReactJS </span>
        <span className="mr-4 stack"><BiLogoNodejs size={24} style={{display: "inline-block"}}/> NodeJS </span>
        <span className="mr-4 stack"><SiRust size={24} style={{display: "inline-block"}}/> Rust </span>
        <span className="mr-4 stack"><SiWebassembly size={24} style={{display: "inline-block"}}/> wasm </span>
        <span className="mr-4 stack"><FaVuejs size={24} style={{display: "inline-block"}}/> vuejs </span>
      </div>
    </>
  )
}
